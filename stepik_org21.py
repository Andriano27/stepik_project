# Оптимизируйте приведённый ниже код, реализующий алгоритм пузырьковой сортировки.
a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0, -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
n = len(a)
for i in range(n - 1):
    for j in range(n - 1 - i):
        if a[j] > a[j + 1]:
            a[j], a[j + 1] = a[j + 1], a[j]
print(a)

a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97,
     -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0,
     -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63,
     -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
n = len(a)
for i in range(n - 1):
    exchanges = 0
    for j in range(n - i - 1):
        if a[j] > a[j + 1]:
            exchanges += 1
            a[j], a[j + 1] = a[j + 1], a[j]
    if exchanges == 0:
        break
print(a)

a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97,
     -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0,
     -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63,
     -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
n = len(a)
swap = True  # задаём сигнальную метку
for i in range(n - 1):
    if swap == False:  # если по окончании внешнего цикла сигнальная метка приняла значение False,
        # то есть ни одного обмена не было произведено, тогда программа прерывается
        break
    for j in range(n - i - 1):
        if a[j] > a[j + 1]:
            a[j], a[j + 1] = a[j + 1], a[j]
            swap = True  # если в данном внутреннем цикле была произведена хотя бы одна перестановка
            # во внутреннем цикле, сигнальная метка принимает значение True
        else:
            swap = False  # если в данном внутреннем цикле не было произведено ни одной перестановки,
            # сигнальная метка сохраняет значение False
print(a)

import time
start_time = time.time()
# тут то, скорость чего хотим замерить
print("--- %s seconds ---" % (time.time() - start_time))

# Отсортируйте список по возрастанию, реализовав алгоритм сортировки выбором.
a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96,
     -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71,
     -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9,
     -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
n = len(a)
for i in range(n-1):  # внешний цикл - пройдется по всем элементам списка, кроме последнего
    min_index = i  # считаем что текущий элемент - минимальный
    for j in range(i + 1, n):  # внутренний цикл ищет минимальный элемент в оставшейся части списка
        if a[j] < a[min_index]:  # если нашли элемент меньше текущего минимального - запоминаем его индекс
            min_index = j
    a[i], a[min_index] = a[min_index], a[i]  # меняем местами минимальный элемент a[min_index] и текущий a[i]
print(a)

a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
n = len(a)
b = []  # создаем пустой список
while len(a) > 0:  # пока значение длины списка больше 0
    b.append(min(a))  # добавляем в новый список минимальное значение из старого списка
    a.remove(min(a))  # после добавления в новый список удаляем это значение из старого
print(b)

a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
print([a.pop(a.index(min(a))) for i in range(len(a))])

a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
n = len(a)
for i in range(n):  # Кол-во циклов = кол-ву чисел в списке
    aa = a[:n]  # Ещё неупорядоченная часть строки
    ind = aa.index(max(aa))  # Индекс максимального числа неупорядоченного отрезка
    aa[ind], aa[-1] = aa[-1], aa[ind]  # Меняем местами максимум и последнее число в списке
    a = aa + a[n:]  # Склеиваем неупорядоченную и упорядоченную части в обновленную строку
    n -= 1  # Новая неупорядоченная часть в след цикле будет на 1(последний элемент короче),
    # а упорядоченная - длиннее
print(a)

# На вход программе подаётся чётное число n(n≥2). Напишите программу, которая выводит список чётных чисел:
# [2, 4, 6, ..., n]
n = int(input())
s = []
for i in range(2, n + 1, 2):
    s.append(i)
print(s)

n = int(input())
seq = list(range(2, n + 1, 2))
print(seq)

print(list(range(2, int(input()) + 1, 2)))

# На вход программе подаются две строки текста, содержащие целые числа. Из данных строк формируются
# списки чисел L и M. Напишите программу, создаёт третий список, элементами которого являются
# суммы соответствующих элементов списков L и M. Далее программа должна вывести каждый элемент
# полученного списка на одной строке через 1 пробел.
a = [int(i) for i in input().split()]
b = [int(i) for i in input().split()]
c = []
for i in range(len(a)):
    c.append(a[i] + b[i])
print(*c)

l = input().split()
m = input().split()
print(*(int(l[i]) + int(m[i]) for i in range(len(l))))

# На вход программе подаётся строка текста, содержащая натуральные числа. Напишите программу,
# которая вставляет между каждым числом знак +, а затем вычисляет сумму полученных чисел.
n = input().split()
total = 0
for i in n:
    total += int(i)
print('+'.join(n) + '=' + str(total))

numbers = [int(number) for number in input().split()]
print(*numbers, sep='+', end=f'={sum(numbers)}')

# Ввод строки с числами
numbers_string = input()
# Разделение строки на отдельные числа
numbers_list = numbers_string.split()
# Перевод строковых чисел в целочисленный формат
numbers = [int(num) for num in numbers_list]
# Формирование строки с использованием знака "+"
expression = "+".join(numbers_list)
# Вычисление суммы чисел
total_sum = sum(numbers)
# Вывод результата
print(expression, '=', total_sum, sep='')

# На вход программе подаётся строка текста. Напишите программу, которая определяет, является ли введённая
# строка корректным телефонным номером. Строка текста является корректным телефонным номером,
# если она соответствует одному из следующих форматов: abc-def-hijk, 7-abc-def-hijk,
# где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9. Программа должна вывести «YES» (без кавычек),
# если строка является корректным телефонным номером, или «NO» (без кавычек) в противном случае.
# Телефонный номер должен содержать только цифры и символ '-', а количество цифр в каждой группе должно
# быть правильным.
n = input().split("-")  # вводим строку и разделяем по символу -
c = [len(i) for i in n]  # создаем список с где каждый элемент это длина соответствующей части из n
if c == [3, 3, 4] and ''.join(n).isdigit():  # проверка, что три части имеют длины 3.3 и 4,
    # объединяем все части в одну строку и проверяем, что это только цифры
    print("YES")
elif c == [1, 3, 3, 4] and ''.join(n).isdigit() and n[0] == '7':  # первая часть одна цифра, остальные также
    print("YES")
else:
    print("NO")

tel_num = input()
if ((len(tel_num) == 12 and tel_num.count('-') == 2) or
(len(tel_num) == 14 and tel_num[0] == '7' and tel_num.count('-') == 3)):
    if len(tel_num) == 14:
        my_list = tel_num.split('-')
        if (len(str(my_list[1])) == 3) and (len(str(my_list[2])) == 3) and (len(str(my_list[3])) == 4):
            flag = True
            for i in my_list:
                if not(i.isdigit()):
                    print('NO')
                    flag = False
                    break
            if flag:
                print('YES')
        else:
            print('NO')
    else:
        my_list = tel_num.split('-')
        if (len(str(my_list[0])) == 3) and (len(str(my_list[1])) == 3) and (len(str(my_list[2])) == 4):
            flag = True
            for i in my_list:
                if not(i.isdigit()):
                    print('NO')
                    flag = False
                    break
            if flag:
                print('YES')
        else:
            print('NO')
else:
    print('NO')

# На вход программе подаётся строка текста. Напишите программу, использующую списочное выражение,
# которая находит длину самого длинного слова.
n = input().split()
s = []
for i in n:
    s.append(i)
longest = s[0]  # считаем, что первая строка самая длинная
for i in s:
    if len(i) > len(longest):  # сравниваем длину каждой строки i в списке с первой строкой,
        # если строка длиннее, то она становится longest
        longest = i
print(len(longest))

print(max([len(a) for a in input().split()]))

lens = [len(el) for el in input().split()]
print(max(lens))

x = input().split()
maximum = 0
for i in x:
    if len(i) > maximum:
        maximum = len(i)
print(maximum)

# На вход программе подаётся строка текста. Напишите программу, использующую списочное выражение,
# которая преобразует каждое слово введённого текста в "молодёжный жаргон" по следующему правилу:
# первая буква каждого слова удаляется и ставится в конец слова;
# затем в конец слова добавляется слог "ки".
text = input()
result = ' '.join([word[1:] + word[0] + 'ки' for word in text.split()])
print(result)

words = [word[1:] + word[0] + "ки" for word in input().split()]
print(*words)

print(*[a[1:] + a[0] + 'ки' for a in input().split()])

s = input().split()
k = []
for i in range(len(s)):
    k.append(s[i][1:] + s[i][0] + "ки")
print(*k)

