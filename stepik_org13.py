print('Cyberpunk 2077'.isalnum())

n = int(input())

# Написать программу, которая поможет Сэму проверять комментарии. Программа должна принимать на вход
# натуральное число n, а затем n строк, представляющих тексты комментариев. Для каждого комментария
# ваша программа должна выводить номер этого комментария (начиная с 1), затем двоеточие (:),
# затем через пробел его текст или сообщение «COMMENT SHOULD BE DELETED» (без кавычек),
# если комментарий должен быть удалён Сэмом.
num = int(input())
for i in range(num):
    s = input()
    if s.isspace() == True or s == '':
        print(i + 1, ':', ' COMMENT SHOULD BE DELETED', sep='')
    else:
        print(i + 1, ':', ' ', s, sep='')

n = int(input())
for i in range(1, n + 1):
    comment_text = input()
    if comment_text == '' or comment_text.isspace():
        comment_text = 'COMMENT SHOULD BE DELETED'
    print(i, ': ', comment_text, sep='')

# Напишите программу, которая принимает на вход строку и проверяет, является ли эта строка корректным
# автомобильным номером. Программа должна вывести «YES» (без кавычек), если искусственный интеллект
# справился со своей задачей, или «NO» (без кавычек) в противном случае. В нашей задаче корректным
# автомобильным номером будем считать следующие форматы:
#  <БУКВА><ЦИФРА><ЦИФРА><ЦИФРА><БУКВА><БУКВА>_<ЦИФРА><ЦИФРА>
# <БУКВА><ЦИФРА><ЦИФРА><ЦИФРА><БУКВА><БУКВА>_<ЦИФРА><ЦИФРА><ЦИФРА>
# где <ЦИФРА> – это любая цифра, а <БУКВА> – это одна из букв кириллицы АВЕКМНОРСТУХ.
s = input().strip()
letters = "АВЕКМНОРСТУХ"
if (len(s) in (9, 10) and
    s[0] in letters and
    s[1].isdigit() and s[2].isdigit() and s[3].isdigit() and
    s[4] in letters and s[5] in letters and
    s[6] == "_" and
    s[7:].isdigit() and (len(s[7:]) in (2, 3))):
    print("YES")
else:
    print("NO")

s = input()
flag = 'NO'
correct_letters = 'АВЕКМНОРСТУХ'
if 9 <= len(s) <= 10:
    letters = s[0] + s[4:6]
    digits = s[1:4] + s[7:]
    underscore = s[6]
    if digits.isdigit() and underscore == '_':
        flag = 'YES'
    for c in letters:
        if c not in correct_letters:
            flag = 'NO'
            break
print(flag)

number = input()
template = ''
reg_1 = '<БУКВА><ЦИФРА><ЦИФРА><ЦИФРА><БУКВА><БУКВА>_<ЦИФРА><ЦИФРА>'
reg_2 = '<БУКВА><ЦИФРА><ЦИФРА><ЦИФРА><БУКВА><БУКВА>_<ЦИФРА><ЦИФРА><ЦИФРА>'
for i in number:
    if i in 'АВЕКМНОРСТУХ':
        template += '<БУКВА>'
    elif i.isdigit():
        template += '<ЦИФРА>'
    elif i == '_':
        template += '_'
    else:
        template = ' '
if template == reg_1 or template == reg_2:
    print('YES')
else:
    print('NO')

s = input()
total = 0
if len(s) >= 9:
    total += 1
    if s[0].isalpha() and s[4].isalpha() and s[5].isalpha():
        total += 1
        if s[1].isdigit() and s[2].isdigit() and s[3].isdigit():
            total += 1
            if s[7:].isdigit():
                total += 1
                if len(s[7:]) >= 2:
                    total += 1
                    if s[6] == '_':
                        total += 1
                        if s[0].isupper() and s[4:7].isupper():
                            total += 1
                            for i in range(len(s)):
                                if s[i] in 	'АВЕКМНОРСТУХ':
                                    total += 1
if total == 10:
    print('YES')
else:
    print('NO')

# Во время собеседования вам предложили решить задачу на валидацию имени пользователя.
# Пользователь пытается создать никнейм для своего аккаунта в соцсети Y. Правила для корректного
# никнейма в соцсети Y следующие: никнейм должен начинаться с символа @; никнейм должен содержать от 5 до
# 15 (включительно) символов (включая первый символ @); никнейм должен содержать только строчные буквы
# и (или) цифры (помимо первого символа @).
# Напишите программу, которая выводит «Correct» (без кавычек), если никнейм соответствует всем
# вышеприведенным правилам, или «Incorrect» (без кавычек) в противном случае.
s = input()
p = '@'
t = s[1:].isalnum()
if 4 < len(s) < 16 and s[0] == p and t and (s[1:].islower() or s[1:].isdigit()):
    print('Correct')
else:
    print('Incorrect')

s = input()
if (
    s.startswith('@')
    and 5 <= len(s) <= 15
    and s[1:].isalnum()
    and s == s.lower()
):
    print('Correct')
else:
    print('Incorrect')

s = input()
spl = s + 'a'  # добавили букву 'а', чтобы работал islower()
if s[:1] == '@' and 5 <= len(s) <= 15 and s[1:].isalnum() and spl.islower():
    print('Correct')
else:
    print('Incorrect')

n = input()
if 5 <= len(n) <= 15 and n[0] == '@':  # если строка от 5 до 15 и начинается с @
    n1 = n[1:]   # для удобства проверки отцепляем от строки первый символ срезом
    if n1.isalnum() and n1.islower() or n1.isdigit():  # если новая строка состоит только из букв
        # и цифр и они строчные ИЛИ новая строка состоит только из цифр
        print('Correct')  # выводим Correct
    else:
        print('Incorrect')  # иначе Incorrect
else:
    print('Incorrect')  # если первое условие (строка 2 программы) не выполняется,
                        # то сразу выводим Incorrect

number_pi = 3.141592653589793
a = 1 / 8
b = 1 / 2
c = 1 / 3
print(f'{a=:.3f}')         # a=0.125
print(f'{number_pi=:6f}')  # number_pi=3.141593
print(f'{number_pi:6f}')   # 3.141593
print(f'{b=:.3f}')         # b=0.500
print(f'{c=:.3f}')         # c=0.333
print('------')
print(f'{c:.3f}')          # 0.333
print(f'{c:.1f}')          # 0.3
print(f'{c:.2f}')          # 0.33
print(f'{c:.10f}')         # 0.3333333333
print('---')
# По умолчанию символом заполнителем является пробел, но можно его заменить на другое значение

n = 12345678912345
print(f'{n:,d}')      # 12,345,678,912,345
print(f'{n:_d}')      # 12_345_678_912_345
sep = '_'             # вложенная f-строка
print(f'{n:{sep}d}')  # 12_345_678_912_345
# Если вы попытаетесь указать другие знаки разделителя вместо знаков "," и "_", получите ошибку
# Также нельзя совмещать указание разделителя с указанием количества разрядов.

# < Выравнивает выражение в фигурных скобках по левому краю. У строк такое поведение по умолчанию
# > выравнивает выражение в фигурных скобках по правому краю. У чисел такое поведение по умолчанию
# ^ выравнивает выражение в фигурных скобках по центру
# Символы "|" используются в f-строке, чтобы помочь очертить интервал.
# Число после «:» указывает на количество символов в ширину.
number = 12345.6789
print(f"Число {number=}")
print(f"|{number:25}|")
print(f"|{number:<25}|")
print(f"|{number:>25}|")
print(f"|{number:^25}|")
print('-' * 25)
text = "Python 3.10"
print(f"Строка {text=}")
print(f"|{text:25}|")
print(f"|{text:<25}|")
print(f"|{text:>25}|")
print(f"|{text:^25}|")

# Используя метод format(), дополните приведённый ниже код так, чтобы он вывел текст:
# In 2010, someone paid 10k Bitcoin for two pizzas.
year = 2010
digit = '10k'
money = 'Bitcoin'
s = 'In {0}, someone paid {1} {2} for two pizzas.'.format(year, digit, money)
print(s)

s = 'In {0}, someone paid {1} {2} for two pizzas.'
print(s.format(2010, '10k', 'Bitcoin'))

# Используя f-строку, дополните приведённый ниже код так, чтобы он вывел текст:
# In 2010, someone paid 10K Bitcoin for two pizzas.
digit = '10K'
money = 'Bitcoin'
s = f'In {2010}, someone paid {digit} {money} for two pizzas.'
print(s)

ss = '2010KBitcoin'
s = f'In {ss[:4]}, someone paid {ss[2:4]}{ss[4]} {ss[5:]} for two pizzas.'
print(s)

# Напишите программу, которая выводит строку, показывающую, сколько российских рублей стоит 1 евро и
# 1 юань на указанную дату в формате
date = input()
eur = float(input())
yuan = float(input())
s = f'На {date}: 1€ = {eur}₽, 1¥ = {yuan}₽'
print(s)

date = input()
euro = input()
yuan = input()
print(f'На {date}: 1€ = {euro}₽, 1¥ = {yuan}₽')

# На вход программе подаются два целых числа a и b. Ваша программа должна посчитать для этих чисел
# сумму их кубов и куб их суммы и вывести результат вычислений в следующем формате
a = int(input())
b = int(input())
s1 = f'Для чисел {a} и {b}:'
s2 = f'  Сумма кубов: {a}**3 + {b}**3 = {a ** 3 + b ** 3}'
s3 = f'  Куб суммы: ({a} + {b})**3 = {(a + b) ** 3}'
print(s1)
print(s2)
print(s3)

a, b = int(input()), int(input())
print(f'Для чисел {a} и {b}:')
print(f'  Сумма кубов: {a}**3 + {b}**3 = {a**3 + b**3}')
print(f'  Куб суммы: ({a} + {b})**3 = {(a + b)**3}')

# Гвидо, засевший за компьютером и не ведущий активный образ жизни, «немного» поднабрал в весе.
# Осталось всего 60 дней до лета, а хочется быть в форме. Вот Гвидо и решился на похудение.
# Все дни до лета он пронумеровал от 1 до 60 (включительно). Перед началом похудения у Гвидо был вес
# 100 кг, а своей целью он поставил достичь веса 88 кг (или меньше). Он решил худеть на одну и ту же массу
# ежедневно. Напишите программу, которая принимает на вход текущий день и текущий вес Гвидо.
# Программа должна вывести фразу: "Все идет по плану" (без кавычек), если Гвидо удаётся держать планку
# в похудении и его вес ниже либо равен тому, который он запланировал на текущий день
# "Что-то пошло не так" (без кавычек), если Гвидо не очень старается и его вес выше того, который
# он запланировал на текущий день. Также программа должна вывести информацию о номере дня похудения,
# текущем весе Гвидо и цели по весу на текущий день в формате

a = int(input())
b = float(input())
x = 100 - a * 0.2  # вычисляется цель по весу, от числа 100 (отнимается) а * 0.2,
# каждый день цель уменьшается на 0.2, результат сохраняется в переменную х
if b <= x:
    print("Все идет по плану")
    print(f'#{a} ДЕНЬ: ТЕКУЩИЙ ВЕС = {b} кг, ЦЕЛЬ по ВЕСУ = {x} кг')
else:
    print('Что-то пошло не так')
    print(f'#{a} ДЕНЬ: ТЕКУЩИЙ ВЕС = {b} кг, ЦЕЛЬ по ВЕСУ = {x} кг')

days_amount = 60
initial_weight = 100
goal_weight = 88
cur_day = int(input())
cur_weight = float(input())
plan_weight = (
    initial_weight - cur_day * (initial_weight - goal_weight) / days_amount
)
if cur_weight <= plan_weight:
    print("Все идет по плану")
else:
    print("Что-то пошло не так")
print(
    f"#{cur_day} ДЕНЬ: ТЕКУЩИЙ ВЕС = {cur_weight} кг, ЦЕЛЬ по ВЕСУ = {plan_weight} кг"
)

day = int(input())
weight = float(input())
target = 100
message = 'Что-то пошло не так'
for d in range(1, 61):
    target -= 0.2
    if d == day:
        if weight <= round(target, 2):
            message = 'Все идет по плану'
        break
print('{}'.format(message))
print(f'#{day} ДЕНЬ: ТЕКУЩИЙ ВЕС = {weight} кг, ЦЕЛЬ по ВЕСУ = {round(target, 2)} кг')

day = int(input())  # ввод номера дня
num = float(input())  # фактический текущий вес
weight = 100.00  # стартовый исходный вес
for i in range(1, 61):  # цикл перебирает дни с 1 по 60, i - номер рассматриваемого дня
    weight -= 0.2  # на каждой итерации уменьшается плановый вес на 0.2 кг
    weight = round(weight, 2)  # round округляет число до двух знаков после запятой
    if day == i:  # когда счетчик i совпадает с введенным пользователем day, нужный день - проверяем вес!
        if weight >= num:  # сравниваем плановый вес и фактический, если фактический не больше планового
            print('Все идет по плану')
        else:
            print('Что-то пошло не так')
        print(f'#{day} ДЕНЬ: ТЕКУЩИЙ ВЕС = {num} кг, ЦЕЛЬ по ВЕСУ = {weight} кг')
        break  # после печати выход из цикла, больше проверять дни не нужно

