s = 'abcdefg'  # начинаем с последнего символа и шаг 3
print(s[::-3])

s = '01234567891011121314151617'
for i in range(0, len(s), 5):
    print(s[i], end='')

s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[7])

# На вход программе подаётся одна строка. Напишите программу, которая выводит элементы строки с
# чётными индексами (0, 2, 4, ...).
s = input()
for c in range(0, len(s), 2):
    print(s[c], end='\n')

s = input()  # не рациональное решение
for i in range(len(s)):
    if i % 2 == 0:
        print(s[i])

# На вход программе подаётся одна строка. Напишите программу, которая выводит в столбик элементы строки
# в обратном порядке.
s = input()
for c in range(-1, -len(s) - 1, -1):  # Начинаем с конца с индекса -1, при отрицательной индексации справа
    # налево -len(s) и добавляем один символ(- 1), чтобы вывелся первый символ строки, и шаг -1.
    print(s[c])

# На вход программе подаются три строки: имя, фамилия и отчество (именно в таком порядке).
# Напишите программу, которая выводит инициалы человека.
s1 = input()
s2 = input()
s3 = input()
print(s2[0], s1[0], s3[0], sep='')

first_name = input()
last_name = input()
middle_name = input()
initials = last_name[0] + first_name[0] + middle_name[0]
print(initials)

# На вход программе подаётся одна строка состоящая из цифр.
# Напишите программу, которая считает сумму цифр данной строки.
s = input()
total = 0
for i in range(len(s)):
    total = total + int(s[i])
print(total)

# На вход программе подаётся одна строка. Напишите программу, которая выводит сообщение «Цифра»
# (без кавычек), если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).
s = input()  # Считываем строку и записываем в переменную 's'
digit = 0  # Создаем переменную-счетчик 'digit' и записываем в неё 0
for c in range(len(s)):  # Создаем цикл c равный длине строки len(s)
    if s[c] in '0123456789':  # Создаем условие если с(переменная цикла) содержит ('0123456789')
        digit = digit + 1  # Счетчик увеличивается на 1
if digit > 0:  # если счетчик больше 0 значит в нем есть цифры
    print('Цифра')
else:
    print('Цифр нет')

s = input()
digits = '0123456789'
for c in s:
    if c in digits:
        print('Цифра')
        break
else:
    print('Цифр нет')

s = input()
flag = False
for i in range(10):
    if str(i) in s:
        flag = True
        break
if flag == True:
    print('Цифра')
else:
    print('Цифр нет')

# На вход программе подаётся одна строка. Напишите программу, которая определяет,
# сколько раз в строке встречаются символы + и *
s = input()
n = 0
m = 0
for c in range(len(s)):
    if s[c] in '+':
        n += 1
    elif s[c] in '*':
        m += 1
print('Символ + встречается', n, 'раз')
print('Символ * встречается', m, 'раз')

# На вход программе подаётся одна строка. Напишите программу, которая определяет сколько в ней пар
# одинаковых соседних символов.
s = input()
count = 0
for c in range(len(s)-1):  # сравниваем предпоследний символ с последним, последний не с чем сравнивать,
    # поэтому -1
    if s[c] == s[c+1]:
        count += 1
print(count)

# На вход программе подаётся одна строка с буквами русского языка.
# Напишите программу, которая определяет количество гласных и согласных букв
s = input()
vowels = 0
consonants = 0
for c in range(len(s)):
    if s[c] in 'ауоыиэяюеАУОЫИЭЯЮЕ':
        vowels += 1
    elif s[c] in 'бвгджзйклмнпрстфхцчшщБВГДЖЗЙКЛМНПРСТФХЦЧШЩ':
        consonants += 1
print('Количество гласных букв равно', vowels)
print('Количество согласных букв равно', consonants)

# На вход программе подаётся натуральное число, записанное в десятичной системе счисления.
# Напишите программу, которая переводит данное число в двоичную систему счисления.
n = int(input())
count = ''
while n != 0:
    largest_digit = n % 2
    count = count + str(largest_digit)
    n = n // 2  # в двоичную систему, значит делим нацело на 2, а не на 10.
print(count[::-1])  # строка будет записана, начиная с первого числа

n = int(input())
binary = ''
while n > 0:
    binary = str(n % 2) + binary  # новая цифра добавляется слева
    n //= 2  # При сложении (конкатенации) строк важен порядок. При написанном в коде варианте число
    # в двоичной системе счисления идёт в нужном порядке, если слагаемые поменять местами
    # так binary = binary + str(n % 2), то двоичное число окажется записано наоборот, с конца.
print(binary)

# Используя срезы, дополните приведённый ниже код так, чтобы он вывел первые 12 символов строки s
s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[:12])

# Используя срезы, дополните приведённый ниже код так, чтобы он вывел последние 9 символов строки s.
s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[-9:])

# Используя срезы, дополните приведённый ниже код так, чтобы он вывел каждый 7 символ строки s
# (начиная с 0-го индекса).
s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[::7])

# На вход программе подаётся одно слово, записанное в нижнем регистре. Напишите программу,
# которая определяет, является ли оно палиндромом.
s = input()
t = s[::-1]
if s == t:
    print('YES')
else:
    print('NO')

word = input()
flag_palindrom = True
i = 0
j = len(word) - 1
while i < j:
    if word[i] != word[j]:
        flag_palindrom = False
        break
    i += 1
    j -= 1
if flag_palindrom:
    print('YES')
else:
    print('NO')

# На вход программе подаётся одна строка. Напишите программу, которая выводит: общее количество символов
# в строке; исходную строку, повторённую 3 раза; первый символ строки; первые три символа строки;
# последние три символа строки; строку в обратном порядке; строку с удалённым первым и последним символами.
s = input()
length = len(s)
product = s * 3
a = s[0]
b = s[:3]
c = s[-3:]
d = s[::-1]
e = s[1:-1]
print(length)
print(product)
print(a)
print(b)
print(c)
print(d)
print(e)

# На вход программе подаётся одна строка. Напишите программу, которая выводит:третий символ этой строки;
# предпоследний символ этой строки; первые пять символов этой строки; всю строку, кроме последних двух
# символов; все символы с чётными индексами; все символы с нечётными индексами; все символы в обратном
# порядке; все символы строки через один в обратном порядке, начиная с последнего.
s = input()
a = s[:3]
print(a[2])
b = s[-2:]
print(b[0])
c = s[:5]
print(c)
d = s[:-2]
print(d)
e = s[::2]
print(e)
g = s[1::2]
print(g)
print(s[::-1])
print(s[::-2])

# На вход программе подаётся строка текста. Напишите программу, которая разрежет её на две равные части,
# переставит их местами и выведет на экран.
s = input()
length = len(s)
half_s = length // 2  # Эта строка находит половину длины строки, используя целочисленное деление (//)
first_half = s[:-half_s]  # Эта строка извлекает первую половину строки.
# Срез [:-half_s] берет все символы, кроме последних half_s символов.
second_half = s[-half_s:]  # Эта строка извлекает вторую половину строки.
# Срез [-half_s:] берет последние half_s символов.
print(second_half + first_half)
# Тут используется отрицательная индексация (-half_s), то есть считаем с конца строки.
# Из-за этого первая часть берётся "до конца-Х", а вторая — "с конца-Х".

s = input()
length = len(s)
half_s = (length + 1) // 2   # первая половина длиннее, если нечётно
first_half = s[:half_s]
second_half = s[half_s:]
print(second_half + first_half)
# s[:half_s] → от начала до индекса half_s - 1 (первая часть)
# s[half_s:] → от индекса half_s и до конца (вторая часть)

s = input()
half_s1 = s[(len(s) + 1) // 2:]
half_s2 = s[:(len(s) + 1) // 2]
print(half_s1 + half_s2)

# На вход программе подается строка текста.
s = input()
# Разрезать ее на две равные части, переставить их местами и вывести на экран.
# Если длина строки нечетная, то длина первой части должна быть на один символ больше.
b = len(s) // 2 + len(s) % 2    # определяем индекс "середины строки"
s = s[b:] + s[:b]    # меняем местами половинки строк
print(s)



