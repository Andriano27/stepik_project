c = 0
n = int(input())
for i in range(n):
    c = i + 1
    print(c, end='')

# Дано натуральное число n. Напишите программу, которая печатает
# численный треугольник с высотой, равной n.
count = 1
n = int(input())  # вводим натуральное число
for i in range(n):  # внешний цикл считаем строки по значению числа
    for j in range(i + 1):  # вложенный цикл прибавляем номер итерации +1 для каждой внешней итерации
        print(count, end=" ")  # печатаем значение счетчика итераций вложенного цикла
        count += 1  # добавляем к счетчику 1 при каждой итерации
    print()  # при окончании каждого цикла j происходит перенос строки для следующего цикла
# Если n>1, первый цикл запускает вторую строку, в которой второй цикл продолжает печатать num с пробелом,
# увеличивая его значение на 1 при каждом повторении.

# Дано натуральное число n(n≤ 9). Напишите программу, которая печатает таблицу размером n×3,
# состоящую из данного числа (числа отделены одним пробелом).
n = int(input())
for i in range(n):
    for j in range(3):
        print('n', end='')
    print()

n = int(input())
for i in range(n):
    print(n, n, n)

# Дано натуральное число n(n≤9). Напишите программу, которая печатает таблицу размером n×5,
# где в i-ой строке указано число i (числа отделены одним пробелом).
n = int(input())           # вводим число
for i in range(1, n + 1):  # внешний цикл числа от 1 до n включительно, новое число - новая итерация
    for j in range(5):     # внутренний цикл печатает каждое число 5 раз на каждой итерации
        print(i, end=' ')
    print()

n = int(input())  # Ввод числа
for i in range(1, n + 1):  # Задаем размерность матрицы n
    for _ in range(5):  # Задаем второй размер матрицы 3
        print(i, end=' ')  # Печатаем матрицу
    print()  # Задаем перенос на другую строку после прохода цикла

# Дано натуральное число n(n≤9). Напишите программу, которая печатает таблицу сложения для всех чисел
# от 1 до n (включительно)
n = int(input())           # Заводим переменную
for i in range(1, n + 1):  # Создаем цикл из переменной n (первая цифра таблицы сложения)(i это от 1 дл n)
    for j in range(1, 10):  # Задаем количество слагаемых (j это от 1 до 9)
        print(i, '+', j, '=', i + j)  # Вывод на экран красивых таблиц сложения
    print()                           # Перевод строки после каждой итерации

# Дано нечётное натуральное число n. Напишите программу, которая печатает равнобедренный
# звёздный треугольник с основанием, равным n.
n = int(input())
for i in range(1, n//2 + 2):
    print('*' * i)
for j in range(n//2, 0, -1):
    print('*' * j)

n = int(input())
for i in range(1, n + 1):
    print('*' * min(i, n - i + 1))

n = int(input())
for i in range(n):  # внешний цикл запускается ровно столько раз сколько нужно строк
    k = (n // 2 + 1) - abs(n // 2 - i)  # рассчитываем, сколько же раз напечатать '*'
    for _ in range(k):                  # для данной строки (зависимость k от i)
        print('*', end='')              # любым подходящим способом
    print()
# имея понимание сколько раз надо сделать работу по выводу '*', делаем эту работу во внутреннем цикле

n = int(input()) // 2
for i in range(1, n + 2):
    print('*' * i)
for i in range(n, 0, -1):
    print('*' * i)
# Разделяем построение звездного квадрата на верхнюю половину и нижнюю половину.
# Каждая половина строится в своем цикле
i = None
n = int(input())
for i in range(1, n // 2 + 1):
    for j in range(i):
        print('*', end='')
    print()
print('*' * (n // 2 + 1))
for g in range(i):
    for a in range(1, (n // 2 - g + 1)):
        print('*', end='')
    print()

n = int(input())
count = 1
middl = n // 2
for i in range(n):
    print("*" * count)
    if count == middl:
        break
    count += 1
print("*" * (middl + 1))
for j in range(n):
    print("*" * count)
    if count == 0:
        break
    count -= 1

# Дано натуральное число n. Напишите программу, которая печатает численный треугольник
n = int(input())
for i in range(1, n + 1):  # внешний цикл обозначим границы от 1 до n включительно (строки).
    for j in range(1, i + 1):  # внутренний цикл от 1 до последней итерации i, увеличивая её на 1.
        print(i, end='')  # печатаем i а каждой строке, по количеству итераций внешнего цикла.
    print()

n = int(input())  # вводим натуральное число
for i in range(n):  # внешний цикл считаем строки по количеству цифр числа
    for j in range(i + 1):  # вложенный цикл прибавляем номер итерации +1 для каждой внешней итерации
        print(i + 1, end="")  # печатаем номер итерации +1 для каждой новой итерации во вложенном цикле
    print()

# Решите уравнение в натуральных числах 28x+30y+31z=365.
total = 0
for x in range(1, 14):
    for y in range(1, 13):
        for z in range(1, 12):
            if 28 * x + 30 * y + 31 * z == 365:
                total += 1
                print(x, y, z)
print(total)

# Имеется 100 рублей. Сколько быков, коров и телят можно купить на все эти деньги, если плата за быка –
# 10 рублей, за корову – 5 рублей, за телёнка – 0.5 рубля и надо купить 100 голов скота?
for a in range(0, 101):
    for b in range(0, 101):
        for c in range(0, 101):
            if (10 * a + 5 * b + 0.5 * c == 100) and (a + b + c == 100):
                print(a, b, c)

# Ищем a, b, c, d, e такие, что a**5 + b**5 + c**5 + d**5 = e**5
# Ограничение: a, b, c, d, e <= 150
limit = 150
powers = [i**5 for i in range(limit + 1)]  # заранее считаем степени
found = False
for a in range(1, limit + 1):
    for b in range(a, limit + 1):  # можно начинать с переменной a, чтобы не проверять
        for c in range(b, limit + 1):  # одинаковые комбинации несколько раз
            for d in range(c, limit + 1):
                s = powers[a] + powers[b] + powers[c] + powers[d]
                if s in powers:  # проверяем, есть ли e такое, что e**5 = s
                    e = powers.index(s)
                    print("Найдено решение:", a, "^5 +", b, "^5 +", c, "^5 +", d, "^5 =", e, "^5")
                    print("Сумма чисел:", a + b + c + d + e)
                    found = True
                    break
            if found: break
        if found: break
    if found: break

limit = 150
# создаём словарь: ключ = число^5, значение = число
powers = {i**5: i for i in range(limit + 1)}
found = False
for a in range(1, limit + 1):
    for b in range(a, limit + 1):
        for c in range(b, limit + 1):
            for d in range(c, limit + 1):
                s = a**5 + b**5 + c**5 + d**5
                if s in powers:   # быстро проверяем
                    e = powers[s] # сразу получаем число e
                    print("Найдено решение:", a, "^5 +", b, "^5 +", c, "^5 +", d, "^5 =", e, "^5")
                    print("Сумма чисел:", a + b + c + d + e)
                    found = True
                    break
            if found: break
        if found: break
    if found: break

for a in range(1, 150):
    for b in range(a, 150):
        for c in range(b, 150):
            for d in range(c, 150):
                for e in range(d, 150):
                    if a ** 5 + b ** 5 + c ** 5 + d ** 5 < e ** 5:
                        break
                    if a ** 5 + b ** 5 + c ** 5 + d ** 5 == e ** 5:
                        print('a =', a, 'b =', b, 'c =', c, 'd =', d,  'e =', e)
                        print(a + b + c + d + e)

# Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой, равной n.
n = int(input())
for i in range(1, n + 1):  # В больший цикл вложены последовательно два цикла, один возрастает, второй убывает.
    for j in range(1, i + 1):
        print(j, end='')
    for j in range(i - 1, 0, -1):
        print(j, end='')
    print()

n = int(input())
for i in range(n + 1):
    for j in range(i):
        print(j + 1, end='')
    for j in range(i - 1, 0, -1):
        print(j, end='')
    print()

n = int(input())
for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(j, end='')
    for j in range(i - 1, 0, -1):
        print(j, end='')
    print()

n = int(input())
if n == 1:
    print(n)
for i in range(1, n):
    if i == 1:
        print(i)
    for j in range(1, i + 1):
        print(j, end='')
        if j == i:
            for c in range(i + 1, 0, -1):
                print(c,end='')
    print()

n = int(input())
# внешний цикл отвечает за количество строк
for i in range(1, n + 1):
    # выводим увеличивающуюся последовательность чисел от 1 до i
    for j in range(1, i + 1):
        print(j, end='')
    # выводим убывающую последовательность чисел от i-1 до 1
    for j in range(i - 1, 0, -1):
        print(j, end='')
    # переводим строку для перехода на следующую
    print()

# На вход программе подаётся натуральное число n. Напишите программу, выводящую графическое изображение
# делимости чисел от 1 до n включительно. В каждой строке надо напечатать очередное число и столько
# символов +, сколько делителей у этого числа.
count = 0  # счетчик для количества делителей
n = int(input())  # вводим натуральное число
for i in range(1, n + 1):  # количество строк, до какой цифры работает цикл, включительно
    for j in range(1, i + 1):  # количество делителей каждой итерации внешнего цикла
        if i % j == 0:  # если цифра является делителем
            count += 1  # счетчик увеличивается на 1
    print(i, '+' * count, sep='')  # печатаем номер итерации и количество делителей '+'
    count = 0  # обнуляем счетчик для следующей итерации

n = int(input())
for i in range(1, n + 1):
    print(i, end='')
    for j in range(1, i + 1):
        if i % j == 0:
            print('+', end='')
    print()

n = int(input())
for i in range(1, n + 1):          # циклом перебираем все числа от 1 до n включительно
    count = 0                      # вводим счетчик, который будет обнуляться каждую новую итерацию
    for j in range(1, i + 1):      # во внутреннем цикле проверяем каждое из чисел на кол-во делителей
        if i % j == 0:             # если делитель есть, то ->
            count += 1             # -> к счетчику добавляем 1, это наши '+'
    print(i, '+' * count, sep='')  # выводим строку с числом и нужным кол-вом плюсов в рамках одной итерации.

# На вход программе подаются два натуральных числа a и b(a< b). Напишите программу, которая находит
# натуральное число из отрезка [a;b] (от a до b включительно) с максимальной суммой делителей.
# Если чисел с максимальной суммой делителей несколько, то искомым числом является наибольшее из них.
a = int(input())
b = int(input())
count = 0  # максимальная сумма делителей
largest = 0  # максимальное число, у которого сумма делителей будет наибольшим
for i in range(a, b + 1):
    total = 0  # обнуление счетчика делителей
    for j in range(1, i + 1):  # цикл для проверки диапазона от 1 до i
        if i % j == 0:  # проверяем все числа от a до b на наличие делителя
            total += j  # подсчитываем сумму делителей каждого числа
    # проверяем после подсчета суммы делителей        
    if total >= count:  # если сумма делителей числа больше максимальной суммы делителей
        count = total  
        largest = i
print(largest, count, end='')

a, b = int(input()), int(input())
counter = 0  # счетчик подсчета суммы делителей
number = 1  # число, которое будем выводить (минимум 1)
summa = 0  # тут будет сумма делителей, которую надо будет вывести
for i in range(a, b + 1):  # проверяем каждое число в [a;b]
    counter = 0  # обнуляем счетчик для каждого i
    for j in range(1, i + 1):  # берем по очереди каждый делитель числа от [1 до самого числа]
        if i % j == 0:  # если число делится на j без остатка, значит j - делитель числа
            counter += j  # создаем сумму делителей
    if counter >= summa:  # если сумма делителей больше или равна, чем сумма делителей предыдущего числа
        summa = counter  # то counter теперь равно кол-ву делителей этого числа вместо кол-ва предыдущего
        number = i  # число у которого делителей оказалось больше, теперь равно number
print(number, summa)  # в конце концов, выводим само число (у которого больше делителей)
# и сумму этих делителей

a = int(input())
b = int(input())
sum_del = 0  # переменная для максимальной найденной суммы делителей (на текущий момент).
for i in range(a, b + 1):  # перебираем все целые i от a до b включительно.
    total = i  # начинаем суммировать делители числа i.
    # Включаем i сам по себе (т.е. сумма считается включая само число).
    for j in range(1, i // 2 + 1):  # перебираем кандидатов на делитель j от 1 до i//2 включительно.
        # Почему до i//2? Потому что любой ненулевой делитель, отличный от i, не может быть больше i/2.
        # Это упрощение по сравнению с проверкой до i.
        if i % j:  # выражение истинно, если остаток от деления не равен нулю.
            continue  # если j не делит i, выполняется continue. Эквивалентно if i % j != 0: continue
        total += j  # если j делитель i, добавляем его в total.
    if total >= sum_del:  # после проверки всех делителей для текущего i сравниваем получившуюся total
        # с текущим максимумом sum_del.
        sum_del = total  # обновляем максимум
        largest = i  # запоминаем число, у которого этот максимум.
print(largest, sum_del)  # выводим число с максимальной суммой делителей и саму эту сумму,
# разделённые пробелом.

# нахождение цифрового корня числа
n = int(input())
while n > 9:          # пока число не однозначное
    count = 0         # вводим счетчик суммы цифр
    while n > 0:      # во вложенном цикле пока n > 0
        largest_digit = n % 10  # находим последнюю цифру числа
        count += largest_digit   # суммируем цифры
        n = n // 10  # отсекаем последнюю цифру и повторяем цикл
    n = count         # обновляем число(присваиваем результат n)
print(n)

n = int(input())
if n % 9 == 0:
    print(9 if n > 0 else 0)
else:
    print(n % 9)

# Дано натуральное число n. Напишите программу, которая выводит значение суммы факториалов: 1!+2!+3!+…+n!
n = int(input())
total = 0  # в этой переменной хранится сумма факториалов
for i in range(1, n + 1):  # цикл от 1 до n включительно
    fact = 1  # заводим переменную для вычисления значения факториала числа i
    for j in range(1, i + 1):  # вложенный цикл для вычисления факториала каждого числа i
        fact = fact * j  # узнаем значение факториала числа i
    total += fact  # прибавляем вычисленный факториал к общей сумме
print(total)

n = int(input())
total = 0  # Заводим переменную total, которая будет хранить сумму всех факториалов.
fact = 1  # Заводим переменную fact, в ней будем хранить текущее значение факториала.
for i in range(1, n + 1):  # Запускаем цикл от 1 до n включительно.
    fact = fact * i  # Умножаем текущее значение fact на i. Это даёт факториал числа i. Таким образом,
    # мы не пересчитываем заново факториал, а используем результат предыдущего шага.
    total = total + fact  # Прибавляем текущее значение факториала к сумме.
print(total)

import math
n = int(input())
total = 0
for i in range(1, n + 1):
    total = total + math.factorial(i)
print(total)

# На вход программе подается два натуральных числа a и b(a<b). Напишите программу,
# которая находит все простые числа от a до b включительно.
a = int(input())
b = int(input())
for i in range(a, b + 1):
    count = 0  # проверяет число делителей и каждый раз обнуляет значение
    for j in range(1, i + 1):  # вложенный цикл, который проверяет все значения от a до b
        if i % j == 0:  # если число делится без остатка, это делитель
            count += 1  # добавляем делитель в счетчик делителей
    if count == 2:  # проверяем, В ОСНОВНОМ ЦИКЛЕ, если число делителей 2, число простое
        print(i)

a = int(input())
b = int(input())
for i in range(a, b + 1):
    # явно обрабатываем единицу
    if i == 1:
        continue
    for j in range(2, i):  # перебираем цикл от 2 до i не включительно!
        # Если у числа num есть делитель,
        # то можно завершать цикл, т.к. это число не является простым
        if i % j == 0:
            break
    else:
        # если цикл завершается без break (штатным образом),
        # то значит делители найдены не были, и число является простым
        print(i)

a, b = int(input()), int(input())  # (2, 15)
for i in range(a, b + 1):  # перебираем числа из диапазона от, а до b+1 (от 2 до 15)
    flag = True  # поднимаем флаг
    for j in range(2, i):  # делим i от 2 до i (на все числа кроме самого себя и 1).
        if i % j == 0:  # если хотя бы раз получаем остаток от деления == 0
            flag = False  # то, опускаем флаг
    if flag == True and i != 1:  # если флаг все еще поднят
        print(i)  # то печатаем i


